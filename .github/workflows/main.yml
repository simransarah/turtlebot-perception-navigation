name: ROS CI (Build & Lint)

# Controls when the action will run. 
# Triggers the workflow on pushes to any branch and on pull requests to the main branch.
on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  # This job builds the ROS package to ensure it compiles correctly.
  build:
    runs-on: ubuntu-20.04
    steps:
      # Step 1: Checks-out repository
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          lfs: true

      # Step 2: Cache ROS dependencies to speed up future builds
      - name: Cache ROS dependencies
        uses: actions/cache@v3
        with:
          path: ~/.ros/rosdep
          key: ${{ runner.os }}-ros-${{ hashFiles('**/package.xml') }}

      # Step 3: Set up the ROS environment
      - name: Set up ROS
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: noetic

      # Step 4: Install dependencies and build the workspace
      - name: Build and Test
        uses: ros-tooling/action-ros-ci@v0.3
        with:
          package-name: turtlebot-perception-navigation 
          target-ros2-distro: '' # Set to empty for ROS1
          vcs-repo-file-url: '' # Set to empty to use the current repo

  # This job checks the Python code for style errors and potential bugs.
  lint:
    runs-on: ubuntu-20.04
    steps:
      # Step 1: Checks-out repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Install and run flake8 linter
      - name: Lint with flake8
        run: |
          pip3 install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. 
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

 # This job runs rostest.
  test:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      # Step 1: Checks-out repository
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          lfs: true

      # Step 2: Cache ROS dependencies
      - name: Cache ROS dependencies
        uses: actions/cache@v3
        with:
          path: ~/.ros/rosdep
          key: ${{ runner.os }}-ros-${{ hashFiles('**/package.xml') }}

      # Step 3: Set up the ROS environment
      - name: Set up ROS
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: noetic
      
      # Step 4: Build and run tests
      - name: Build and Run Tests
        uses: ros-tooling/action-ros-ci@v0.3
        with:
          package-name: turtlebot-perception-navigation
          target-ros2-distro: ''
          # Add arguments to run tests
          catkin-make-args: "run_tests"
          # Specify where test results are stored
          catkin-test-results: "build/test_results"
